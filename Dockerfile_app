# Build Stage
FROM golang:1.23.4-alpine AS builder

# Maintainer
LABEL maintainer="Lucas Belfanti"

# Install necessary dependencies
RUN apk update && apk add --no-cache  \
    curl  \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=America/Argentina/Buenos_Aires

# Create the application directory and set it as the working directory
WORKDIR /app

# Copy only the Go module files to leverage caching and download go dependencies
COPY go.mod go.sum ./
RUN go mod download

# Copy the application source code, the migrations folder and the .env file
COPY cmd/ ./cmd
COPY internal/ ./internal
COPY migrations/ ./migrations

# Build the application and output the binary as 'ahbcc'
RUN CGO_ENABLED=0 GOOS=linux go build -o /ahbcc ./cmd/api

# Run Stage
FROM alpine:3.21.0 AS runner

# Install necessary dependencies
RUN apk update && apk add --no-cache  \
    curl  \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=America/Argentina/Buenos_Aires

# Create the application directory and set it as the working directory
WORKDIR /app

# Copy the built image from builder stage
COPY --from=builder /ahbcc /ahbcc

# Expose port
EXPOSE ${API_PORT}

# Run application
CMD [ "/ahbcc" ]

